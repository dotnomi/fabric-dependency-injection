name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: [ ubuntu-latest ]

    defaults:
      run:
        shell: bash

    permissions:
      contents: write

    strategy:
      matrix:
        java: [ 21 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      - name: Elevate gradle wrapper
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Extract version
        run: |
          PROJECT_NAME=$(./gradlew printProjectName -q | tail -n 1 | tr -d '\r' | xargs)
          PROJECT_VERSION=$(./gradlew printProjectVersion -q | tail -n 1 | tr -d '\r' | xargs)
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV
          echo "Project Name: $PROJECT_NAME"
          echo "Project Version: $PROJECT_VERSION"

      - name: Build with Gradle
        run: ./gradlew shadowJar

      - name: Read changelog
        run: |
          CHANGELOG_CONTENT_RAW=$(cat .github/changelogs/changelog.md)
          WARNING=""
          if [[ "$PROJECT_VERSION" == *a ]]; then
              WARNING="IMPORTANT: This is an alpha build. There might be bugs."
          elif [[ "$PROJECT_VERSION" == *b ]]; then
              WARNING="IMPORTANT: This is a beta build. There might be bugs."
          fi
          
          # Combine raw changelog and warning, ensuring the warning is on its own line if it exists.
          FINAL_CHANGELOG="${CHANGELOG_CONTENT_RAW}"
          if [[ -n "$WARNING" ]]; then
            FINAL_CHANGELOG="${FINAL_CHANGELOG}\n\n${WARNING}"
          fi

          # Generate a random, unique delimiter
          DELIMITER="EOF_CHANGELOG_$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20)"
          
          # Write the multi-line content using the generated delimiter
          echo "CHANGELOG_CONTENT<<$DELIMITER" >> $GITHUB_ENV
          echo -e "$FINAL_CHANGELOG" >> $GITHUB_ENV # Use -e for echo to interpret newlines
          echo "$DELIMITER" >> $GITHUB_ENV
          echo "Changelog content prepared."

      - name: Check if Release Exists
        if: ${{ matrix.java == '21' }}
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=$PROJECT_VERSION
          REPO=$GITHUB_REPOSITORY
          
          echo "Checking for existing release with tag: $TAG_NAME"
          RELEASE_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/releases/tags/$TAG_NAME" || true)
          
          if [[ $(echo "$RELEASE_INFO" | jq -r '.tag_name // empty') == "$TAG_NAME" ]]; then
              RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
              echo "Release $TAG_NAME already exists (ID: $RELEASE_ID). Deleting..."
          
              curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO/releases/$RELEASE_ID"
          
              echo "Release $TAG_NAME deleted successfully."
          else
              echo "Release with tag $TAG_NAME not found. No need to delete."
          fi

      - name: Create Release
        if: ${{ matrix.java == '21' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: ${{ env.PROJECT_NAME }} - v${{ env.PROJECT_VERSION }}
          body: ${{ env.CHANGELOG_CONTENT }}
          draft: false
          prerelease: ${{ endsWith(env.PROJECT_VERSION, 'a') || endsWith(env.PROJECT_VERSION, 'b') }}

      - name: Upload JAR file
        if: ${{ matrix.java == '21' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}-all.jar
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}.jar
          asset_content_type: application/java-archive